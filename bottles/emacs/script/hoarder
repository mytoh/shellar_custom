#!/usr/bin/env runemacs
;; -*- lexical-binding: t; -*-

(setq lexical-binding t)
(setq debug-on-error t)

(require 'cl-lib)
(require 'cl-generic)

(add-to-list 'load-path (expand-file-name "~/huone/ateljee/emacs-glof"))
(add-to-list 'load-path (expand-file-name "~/huone/ateljee/emacs-colle"))
(add-to-list 'load-path (expand-file-name "~/huone/ateljee/emacs-hoarder"))
(require 'hoarder)


(cl-defun hoarder:update-package-git-async (package)
  (when (glof:get  package :origin)
    (cl-letf ((name (glof:get package :name))
              (path (hoarder:concat-path hoarder-directory (glof:get package :origin)))
              (type (glof:get package :type)))
      (when (and (cl-equalp :git type)
                 (not (file-symlink-p path)))
        (cl-letf* ((proc-buf (get-buffer-create (format "hoarder-git-%s" (glof:get package :origin))))
                   (proc-name (format "hoarder-git-pull-%s" (glof:get package :origin)))
                   (proc (start-process-shell-command proc-name
                                                      proc-buf
                                                      (format "git -C %s pull" path)))
                   (sentinel-cb
                    (lambda (process signal)
                      (cond
                        ((equal signal "finished\n")
                         (cl-letf ((result (with-current-buffer (process-buffer process)
                                             (buffer-substring (point-min) (point-max)))))
                           (hoarder:message "updated package %s" name)
                           (cond
                             ((hoarder:git-updatedp result)
                              (hoarder:message "compiling package %s" name)
                              (hoarder:message "result: %s" result)
                              (hoarder:option-compile package path)
                              (hoarder:option-build package)))
                           (kill-buffer (process-buffer process))))
                        (t
                         (ouput "got signal %s" signal)
                         (display-buffer (process-buffer process)))))))
          (set-process-sentinel proc sentinel-cb)
          proc)))))


(cl-defun hoarder:update-package-git-async-make-process (package)
  (when (glof:get package :origin)
    (cl-letf ((name (glof:get package :name))
              (path (hoarder:concat-path hoarder-directory (glof:get package :origin)))
              (type (glof:get package :type)))
      (when (and (cl-equalp :git type)
                 (not (file-symlink-p path)))
        (cl-letf* ((proc-buf (get-buffer-create (format "hoarder-git-%s" (glof:get package :origin))))
                   (proc-name (format "hoarder-git-pull-%s" (glof:get package :origin))))
          (cl-labels ((sentinel-cb (process signal)
                        (cond
                          ((equal signal "finished\n")
                           (cl-letf ((result (with-current-buffer (process-buffer process)
                                               (buffer-substring (point-min) (point-max)))))
                             (hoarder:message "updated package %s" name)
                             (pcase result
                               ((pred hoarder:git-updatedp)
                                (hoarder:message "compiling package %s" name)
                                ;; (hoarder:message "result: %s" result)
                                (when (glof:get package :compile)
                                  (hoarder:option-compile package path))
                                (hoarder:option-build package)))
                             (kill-buffer (process-buffer process))))
                          (t
                           (message name)
                           (message (glof:get package :path))
                           (message "got signal %s" signal)
                           (display-buffer (process-buffer process))))))
            (make-process
             :name proc-name
             :buffer proc-buf
             :command (list "git" "-C" path "pull" )
             :sentinel #'sentinel-cb)))))))

(cl-defun hoarder-update-async ()
  (interactive)
  (cl-letf ((pkgs (seq-partition
                   hoarder:*packages*
                   2)))
    (seq-each
     (lambda (ps)
       (seq-each
        #'accept-process-output
        (seq-map
         #'hoarder:update-package-git-async
         ps)))
     pkgs)))

(cl-defun hoarder-async-update-make-process ()
  (interactive)
  (cl-letf ((pkgs
             (seq-partition
              ;; (seq-take hoarder:*packages* 20)
              hoarder:*packages*
              4)))
    (seq-each
     (lambda (pkg)
       (thread-last pkg
         (seq-map #'hoarder:update-package-git-async-make-process)
         (seq-each #'accept-process-output)))
     pkgs))
  (message "update finished"))

(defun main ()
  (cl-letf ((muki:hoarder-directory
             (expand-file-name (file-name-as-directory "vendor")
                               user-emacs-directory)))
    (hoarder:initialize muki:hoarder-directory))

  (load "~/.emacs.d/init.d/layer/package-manager/register/init.el")

  (pcase (car argv)
    ("update"
     (hoarder-update))
    ("update-async"
     (hoarder-async-update-make-process))
    ("check"
     (hoarder:check))))

(main)

;; Local Variables:
;; mode: emacs-lisp
;; End:
